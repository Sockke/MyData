"""
    python的内存管理机制:
    python底层是用C来实现的, python的内置类型其实在底层通过C结构体来封装的
    每个变量, 其实是一个C对象

    python的内置类型: float, int, str, list, tuple, dict
    每种类型对象在底层是一个结构体对象, 每种类型的对象通过双向链表来维护
    结构体类型:
    单值类型: PyObject: 双向指针, 引用计数, 对象类型
    多值类型: PyVarObject: PyObject, 元素个数
    除了float继承了单值类型结构体外, 其他内置类型都继承了多值类型结构体,
    这也是为什么int可以存储无限长的数字, 因为底层是字符串

    python定义一个变量, 经过那些事?
    python的内置类型的变量在底层是一个C对象, 包含了引用计数, 对象类型等信息,
    1. 首先在堆上开辟内存空间
    2. 初始化, 比如说将引用计数设置为1, 保存数据的类型等
    3. 如果还有其他变量引用这个对象时, 引用计数会加1; 如果有变量不再引用
    这个对象时, 引用计数会减1

    python可能会回收这个对象:
    当对象的引用计数为0时, 代表没有对象在引用这个对象了,
    按理说这就是个垃圾对象, 需要GC进行回收.
    但是python中为了提高性能, 会对不同内置类型的变量设置缓存机制,
    不一定会立即回收.
    1. 比如说int类型底层维护了一个小整数池, 对于[-5, 256]的变量不会被回收而是
    放到整数池中;
    2. 还有比如float与list, 维护了一个缓存链表, 待销毁的变量,
    如果用户再定义float或list变量时, 直接从缓存链表中取即可
    float最多放100, list最多放80
    这样的缓存机制可以防止内存的频繁回收和开辟
"""

