[VM]: 虚拟存储器
  
[什么是虚拟存储器]:
  虚拟存储器是一种抽象, 是操作系统对文件和主存的一种抽象表示
  先描述, 再组织
    操作系统通过mm_struct来描述进程地址空间
    虚拟存储器在磁盘中被组织为一段连续的数组

[为什么会产生虚拟存储器]:
  为了更合理的控制和管理计算机资源, 简单来讲就是合理的利用内存
  虚拟存储器的作用:
  1. 作为缓存的工具
    虚拟存储器将主存看成存储在磁盘上的高速缓存, 通过磁盘与主存之间来回传送数据,
    使得在主存中只保留活动区域, 提高了使用主存的使用效率
  2. 作为存储器管理的工具
    虚拟存储器为每个进程提供了一致进程地址空间, 同时为每个进程提供了独立的页表
    这样简化了存储器的管理
      简化链接: 
        一致的进程地址空间, 区域地址划分一致
      简化共享:
        操作系统通过将不同进程的部分虚拟页面映射到相同的物理页面, 从而使得多个进程共享这部分代码
        的拷贝(进程地址空间的共享映射区) --- 共享内存
      简化存储器分配:
        用户malloc请求额外堆空间时, 操作系统分配一段连续的虚拟存储器页面, 然后映射到物理存储器中
        的任意位置(页面分散)
      简化加载:
        按需页面调度的策略, 当每个页面第一次被引用时, 操作系统才把数据从磁盘拷贝到主存
  3. 作为存储器保护的工具
    通过带许可位的页表来实现存储器的访问控制, 实现并简化了对存储器的保护
    (段错误: 指令违背了许可条件, 触发异常(一般保护故障))

[虚拟存储器的效率]:
    物理存储器有限, 并且页面调度的开销很大, 虚拟存储器的效率是如何保证的?

    其实虚拟存储器系统的效率很大程度上受程序员的影响, 只要保证程序有良好的时间局部性, 那么
    虚拟存储器系统会工作的非常好
    所谓良好的时间局部性是指, 在同一时间段内, 活动页面趋向于较小的范围, 活动页面与物理存储器
    大小相差不大. 这样的话, 在初始的页面调度开销较大之外, 以后的工作会直接页命中, 不会产生
    额外的磁盘流量, 从而保证了程序的效率.
    但是, 如果活动页面趋向于较大的范围, 超过了物理存储器的大小. 这样的话, 在初始的页面调度
    开销较大之外, 以后的工作会产生过多的缺页, 引发频繁的页面调度, 降低了程序的效率

    所以说理解虚拟存储器系统, 有助于更好的控制和管理存储器系统, 来提高程序的效率

[多级页表]:
  多级页表就是层次结构的页表, 页表之间也存在映射关系

  为什么需要多级页表?
    因为单级页表浪费了不必要的内存, 比如说在32位操作系统上, 每个页面4K, 则总是需要4M的页表
    存储在内存中, 但是大多数情况下, 活动页表只是虚拟地址空间的很小一部分

  多级页表的实现
    上级页表是下级页表的组织, 下级页表是上级页表的划分
    比如说二级页表系统, 在虚拟地址空间中, 一级页表中每个PTE映射一个4M的块;
    二级页表中每个PTE映射一个4K的页. 这样的话, 当某个页分配时, 只需要分配当前页
    所在的块的大小的页表即可(按需分配).

  多级页表的优势
    最大的优势就是减少了主存的压力
    类似于按需页面调度的策略, 这里相当于实现了按需分配页表, 页表会局部分配

  级数过高, 访问效率降低?
    TLB会将不同层次的PTE缓存一部分, 一定程度上缓解了多级访问(地址翻译)带来的消耗 
    实际上多级页表的地址翻译不会比单级页表慢很多

[虚拟地址与物理地址的计算]:
  页号: 虚拟地址/页面大小
  块号: 由页号对应
  偏移量: 虚拟地址 % 页面大小
  块号 * 页面大小 + 偏移量
