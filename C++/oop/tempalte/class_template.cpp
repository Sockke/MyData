#include "class_template.h"
#include <vector>
using namespace std;

// 类模板: 本质上是模板, 不参与编译
// 类模板的实例化: 类模板的特化或在调用点处实例化
// 1. 编译时期, 在定义对象处对类模板的成员函数进行实例化,
// 类模板的选择实例化, 调用哪个成员函数才会对指定的成员进行实例化(除了虚函数)
// 2. 用户特化类模板
// 模板类: 类模板实例化之后成为模板类, 选择实例化的函数生成符号
//
// 类在编译时期会检查类中的成员以及类的实例化情况,
// 虚函数会生成虚表和虚表指针, 这是编译时期必须生成的,
// 如果代码中没有类的实例化, 那么编译时期会把类中的其他成员代码给优化掉, 不生成符号
// 实例化之后对成员方法选择实例化, 对象调用的方法生成符号, 没有调用的方法优化掉

class Tmp;
int main() {
}

#if 0
int main() {
  SeqStack<int> s;
  for (int i = 0; i < 8; ++i) {
    s.push(i);
  }
  while (!s.empty()) {
    cout << s.top() << " " ;
    s.pop();
  }
  cout << endl;
  return 0;
}
#endif
