[位图]:bitset
  位图是一种数据结构, 按位来表示数据, 一一映射, 一般用于整数的海量数据处理
  比如说判断数据存不存在, 判断数据是否重复, 排序等

  [实现原理]:
    Set:
    1. 将指定的整数映射到指定位上, 置一
    Find:
    2. 判断指定数据的映射位是否为1
    Reset:
    3. 将指定数据的映射位清零

[布隆过滤器]: bloom filter
  布隆过滤器是一种概率型数据结构, 按位来表示数据, 多位映射, 一般用于非整数的海量数据处理
  可以表示数据一定不存在或可能存在的场景
  比如说判断某个数据在不在位图中: 垃圾邮件判别, 网络爬虫痕迹
  还有排序

  [产生背景]:
  布隆过滤器是建立在位图的基础上的, 用来解决位图只能用于整数的缺陷, 
  不仅能减少哈希冲突, 同时也能减少空间的浪费
    
  [实现原理]:
    HFunc:
    1. 将非整数数据通过多个不同的hash函数, 转化成不同整数
    Set:
    2. 将这些整数映射到位图上, 这样一个数据可以映射多位, 减少了hash冲突
    Find:
    3. 在查找某个数据时, 如果该数据对应映射的那些位, 只要有一个为0, 那么该数据
    一定不存在, 如果都为1, 那么该数据可能存在(可能会出现因hash冲突造成的误判). 
    4. 布隆过滤器不建议删除操作, 因为当数据量多的时候难免会因为hash冲突产生
    多个数据有共享映射位的情况, 所以删除某个数据的映射位可能会影响其他数据
    (但是, 可以为布隆过滤器提供删除的接口, 这样可以通过引用计数或重新映射等方式来
    解决影响其他数据的问题, 但是这样的操作会需要更大的空间)
  [缺陷]:
    1. 因为存在hash冲突, 因此不能判定某个数据一定存在


[一致性哈希]:
  一致性哈希是一种特殊的哈希结构, 将key与hash结点分离, 以环的形式分布
  一般用于分布式存储

  [产生背景]:
    虽然可以通过哈希桶这种类似的开散列结构在进行数据的存储, 但是不能解决分布式系统中
    机器的增删所带来的问题, 比如说机器挂掉, 原本key的映射关系发生改变, 可能找不到对应
    的key而需要重新存储; 再比如增加机器, 原本key的映射关系也会发生改变, 新增的机子可能
    等不到充分利用. 一般会考虑rehash, 但是对于高并发的情景, rehash会导致服务器崩溃.

  [实现原理]:
    1. 一致性哈希是通过一个哈希环来实现, 将哈希环平均分割, 使得数据与机器结点分布在上面
    2. 机器结点通过hash算法确定位置
    3. key通过hash函数确定位置, 如果位置与机器结点重合, 那么直接连接在机器结点上;
    否则, 顺时针查找最近的机器结点, 进行连接
    4. 当增删一个结点时, 只需要将该结点附近的key进行重新映射即可, 不会影响到大部分的数据

  [缺陷]:
    当机器结点较少并且分布不均匀时, 对大量key的存储可能存在负载不均衡的情况
    比如说有的机器负载重, 而有的机器很空闲, 等不到利用

    可以通过引入虚拟结点来解决这个问题, 即对一个机器结点计算多个哈希
    虚拟结点就是介于key与机器结点之间的一层缓存
    可以通过对机器结点的名称(主机名或IP)的后缀进行标识, 对标识后的名称进行求hash值得到
    虚拟结点的位置, key的hash映射关系不变, 只不过映射到了虚拟结点上
    最后就是完成虚拟结点到机器结点的定位即可
