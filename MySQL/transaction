[事务]:
  事务是指, 我执行一个SQL语句所完成的一系列操作, 要么完全的执行, 要么就不执行
  start transaction
  commit;
  rollback;

  事务有4个特性:
  一致性: 事务的前后, 数据库的状态是一致的
  隔离性: 事务与事务之间是独立的
  原子性: 事务中所执行的一系列操作是原子的
  持久性: 事务更新的数据不能丢失

  脏读: 读取到了没有提交的数据, 比如说事物A读取了数据, 这个数据是事物B进行修改的但是未提交的数据, 由于某种原因导致
  事物B回滚, 此时A读到的数据是脏数据
  不可重复读: 两次读取的数据内容不一致, 比如说事物A要经历一次较长的读取过程, 这个过程中事物B对该数据进行了修改,
  导致事物A两次读取的数据不一致, 产生了不可重复度的现象
  幻读: 两次读取的数据总数不一致, 比如说事物A要经历一次较长的读取过程, 这个过程中事物B对该类型的数据进行了插入或删除操作,
  导致事物A两次读取的数据总数不一致, 产生了幻读

  事务的隔离级别:
  数据库的并发操作会带来数据更新丢失, 脏读, 不可重复度, 幻读等问题
  需要添加事务的隔离级别, 以及锁机制
  MySQL的默认隔离级别是可重复读, 也就是开启事务A与事务B, 事务B对数据进行了修改操作, 并且已经提交,
  但是事务A每次读取的数据都是一致的, 解决了脏读, 不可重复读的问题. InnoDB内部解决了幻读的问题.
  像Oracle, sql server默认是使用了读已提交的隔离级别, 也就是开启事务A和事务B, 事务B对数据进行修改并提交,
  事务A在事务B提交前后读取的数据不一致, 虽然解决了脏读的问题, 但是没有解决不可重复读的问题.
  
[锁]:
  数据库中锁分为悲观锁和乐观锁, 悲观锁是数据库中的锁机制, 乐观锁需要用户自己实现 
  1. 悲观锁, 事务会认为数据随时会修改, 因此需要对整个数据处理加锁
  比如说读锁与写锁, 事务加读锁, 其他事务也可以加读锁但不能加写锁, 数据可以被同时读
  事务加写锁, 其他事务既不能加读锁也不能加写锁, 只能当前事务对数据进行读写操作
  2. 乐观锁, 事务会认为数据可能没有被修改, 因此不去加锁, 但在更新的时候去判断一下数据是否修改.
[锁粒度]:
  比较常见的锁粒度有表锁, 行锁
  1. 表锁对整个表加锁, 开销小, 不会产生死锁
  但是锁粒度大, 锁冲突的概率高, 不支持高并发
  2. 行锁对表中的行加锁, 锁粒度小, 锁冲突的概率小, 支持高并发
  但是开销大, 容易产生死锁

  myisam只支持表锁, innnodb支持表锁, 行锁, 同时也支持事务
  对于innodb, 默认的锁粒度是行锁, 行锁必须建立在索引之上, 如果说当前的sql没有用到索引, 
  那么innodb会退化成表锁.
  想这种表锁, 行锁都是sql内部提供的锁机制, 是一种悲观锁. 比如说读写锁.

  innodb默认是采用行锁+mvcc来实现并发控制的, 像这种行锁和表锁是sql内部提供的锁机制, 是一种悲观锁.
  而mvcc底层采用乐观锁的形式, 本质上是尽可能的不使用锁, 而是通过一些逻辑来控制并发的访问.
  1. mvcc在底层维护了一个undo日志, 在undo日志中存放了对某条数据的版本链
  2. 对于每一条数据, 封装了2个隐藏的列, 分别是trx_id与roll_pointer, 
  trx_id存储了对该数据修改的最新的事务id, 每次对数据进行修改, 都会将旧的数据连接到undo中的版本链中,
  roll_pointer指向了上一个旧的数据.
  3. 对于像mysql这种默认隔离级别为repeatable read, 每个事务会维护一个readview.
  readview中存放了系统中当前活跃的读写事务, 也就是说修改了但是还没有提交的事务,
  假设列表中的活跃的事务范围为[80, 90]
  如果你查询的数据的trx_id<80, 那么肯定是已经提交的数据了, 因此可以直接读取;
  如果你查询的数据的trx_id为85, 那么就需要去版本链中进行搜索, 比对trx_id, 
  如果在列表中, 说明没有提交, 继续找下一个...
  如果你查询的数据的trx_id>90, 那么肯定是未提交的数据, 因此不能读取, 需要去版本链中找旧数据.


  
