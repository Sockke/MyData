// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_2eproto;
namespace login_proto {
class FriendsRequest;
class FriendsRequestDefaultTypeInternal;
extern FriendsRequestDefaultTypeInternal _FriendsRequest_default_instance_;
class FriendsResponse;
class FriendsResponseDefaultTypeInternal;
extern FriendsResponseDefaultTypeInternal _FriendsResponse_default_instance_;
class ResultInfo;
class ResultInfoDefaultTypeInternal;
extern ResultInfoDefaultTypeInternal _ResultInfo_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace login_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::login_proto::FriendsRequest* Arena::CreateMaybeMessage<::login_proto::FriendsRequest>(Arena*);
template<> ::login_proto::FriendsResponse* Arena::CreateMaybeMessage<::login_proto::FriendsResponse>(Arena*);
template<> ::login_proto::ResultInfo* Arena::CreateMaybeMessage<::login_proto::ResultInfo>(Arena*);
template<> ::login_proto::User* Arena::CreateMaybeMessage<::login_proto::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace login_proto {

enum User_Gender : int {
  User_Gender_MALE = 0,
  User_Gender_FEMALE = 1,
  User_Gender_User_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  User_Gender_User_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool User_Gender_IsValid(int value);
constexpr User_Gender User_Gender_Gender_MIN = User_Gender_MALE;
constexpr User_Gender User_Gender_Gender_MAX = User_Gender_FEMALE;
constexpr int User_Gender_Gender_ARRAYSIZE = User_Gender_Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_Gender_descriptor();
template<typename T>
inline const std::string& User_Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_Gender_descriptor(), enum_t_value);
}
inline bool User_Gender_Parse(
    const std::string& name, User_Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_Gender>(
    User_Gender_descriptor(), name, value);
}
// ===================================================================

class ResultInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_proto.ResultInfo) */ {
 public:
  ResultInfo();
  virtual ~ResultInfo();

  ResultInfo(const ResultInfo& from);
  ResultInfo(ResultInfo&& from) noexcept
    : ResultInfo() {
    *this = ::std::move(from);
  }

  inline ResultInfo& operator=(const ResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultInfo& operator=(ResultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultInfo* internal_default_instance() {
    return reinterpret_cast<const ResultInfo*>(
               &_ResultInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultInfo& a, ResultInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultInfo* New() const final {
    return CreateMaybeMessage<ResultInfo>(nullptr);
  }

  ResultInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultInfo& from);
  void MergeFrom(const ResultInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_proto.ResultInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_proto.ResultInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_proto.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_proto.User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef User_Gender Gender;
  static constexpr Gender MALE =
    User_Gender_MALE;
  static constexpr Gender FEMALE =
    User_Gender_FEMALE;
  static inline bool Gender_IsValid(int value) {
    return User_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN =
    User_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX =
    User_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE =
    User_Gender_Gender_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Gender_descriptor() {
    return User_Gender_descriptor();
  }
  template<typename T>
  static inline const std::string& Gender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Gender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Gender_Name.");
    return User_Gender_Name(enum_t_value);
  }
  static inline bool Gender_Parse(const std::string& name,
      Gender* value) {
    return User_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
    kGenderFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .login_proto.User.Gender gender = 3;
  void clear_gender();
  ::login_proto::User_Gender gender() const;
  void set_gender(::login_proto::User_Gender value);
  private:
  ::login_proto::User_Gender _internal_gender() const;
  void _internal_set_gender(::login_proto::User_Gender value);
  public:

  // @@protoc_insertion_point(class_scope:login_proto.User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class FriendsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_proto.FriendsRequest) */ {
 public:
  FriendsRequest();
  virtual ~FriendsRequest();

  FriendsRequest(const FriendsRequest& from);
  FriendsRequest(FriendsRequest&& from) noexcept
    : FriendsRequest() {
    *this = ::std::move(from);
  }

  inline FriendsRequest& operator=(const FriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendsRequest& operator=(FriendsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendsRequest* internal_default_instance() {
    return reinterpret_cast<const FriendsRequest*>(
               &_FriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FriendsRequest& a, FriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendsRequest* New() const final {
    return CreateMaybeMessage<FriendsRequest>(nullptr);
  }

  FriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendsRequest& from);
  void MergeFrom(const FriendsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_proto.FriendsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:login_proto.FriendsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class FriendsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_proto.FriendsResponse) */ {
 public:
  FriendsResponse();
  virtual ~FriendsResponse();

  FriendsResponse(const FriendsResponse& from);
  FriendsResponse(FriendsResponse&& from) noexcept
    : FriendsResponse() {
    *this = ::std::move(from);
  }

  inline FriendsResponse& operator=(const FriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendsResponse& operator=(FriendsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendsResponse* internal_default_instance() {
    return reinterpret_cast<const FriendsResponse*>(
               &_FriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendsResponse& a, FriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendsResponse* New() const final {
    return CreateMaybeMessage<FriendsResponse>(nullptr);
  }

  FriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendsResponse& from);
  void MergeFrom(const FriendsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_proto.FriendsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_login_2eproto);
    return ::descriptor_table_login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // repeated .login_proto.User friend_list = 2;
  int friend_list_size() const;
  private:
  int _internal_friend_list_size() const;
  public:
  void clear_friend_list();
  ::login_proto::User* mutable_friend_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_proto::User >*
      mutable_friend_list();
  private:
  const ::login_proto::User& _internal_friend_list(int index) const;
  ::login_proto::User* _internal_add_friend_list();
  public:
  const ::login_proto::User& friend_list(int index) const;
  ::login_proto::User* add_friend_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_proto::User >&
      friend_list() const;

  // .login_proto.ResultInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::login_proto::ResultInfo& info() const;
  ::login_proto::ResultInfo* release_info();
  ::login_proto::ResultInfo* mutable_info();
  void set_allocated_info(::login_proto::ResultInfo* info);
  private:
  const ::login_proto::ResultInfo& _internal_info() const;
  ::login_proto::ResultInfo* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:login_proto.FriendsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_proto::User > friend_list_;
  ::login_proto::ResultInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultInfo

// int32 errcode = 1;
inline void ResultInfo::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultInfo::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultInfo::errcode() const {
  // @@protoc_insertion_point(field_get:login_proto.ResultInfo.errcode)
  return _internal_errcode();
}
inline void ResultInfo::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultInfo::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:login_proto.ResultInfo.errcode)
}

// bytes errmsg = 2;
inline void ResultInfo::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultInfo::errmsg() const {
  // @@protoc_insertion_point(field_get:login_proto.ResultInfo.errmsg)
  return _internal_errmsg();
}
inline void ResultInfo::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:login_proto.ResultInfo.errmsg)
}
inline std::string* ResultInfo::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:login_proto.ResultInfo.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultInfo::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void ResultInfo::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ResultInfo::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_proto.ResultInfo.errmsg)
}
inline void ResultInfo::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_proto.ResultInfo.errmsg)
}
inline void ResultInfo::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_proto.ResultInfo.errmsg)
}
inline std::string* ResultInfo::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultInfo::release_errmsg() {
  // @@protoc_insertion_point(field_release:login_proto.ResultInfo.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultInfo::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:login_proto.ResultInfo.errmsg)
}

// -------------------------------------------------------------------

// User

// bytes name = 1;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:login_proto.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:login_proto.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:login_proto.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.GetNoArena();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void User::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:login_proto.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login_proto.User.name)
}
inline void User::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login_proto.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:login_proto.User.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:login_proto.User.name)
}

// int32 age = 2;
inline void User::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::age() const {
  // @@protoc_insertion_point(field_get:login_proto.User.age)
  return _internal_age();
}
inline void User::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void User::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:login_proto.User.age)
}

// .login_proto.User.Gender gender = 3;
inline void User::clear_gender() {
  gender_ = 0;
}
inline ::login_proto::User_Gender User::_internal_gender() const {
  return static_cast< ::login_proto::User_Gender >(gender_);
}
inline ::login_proto::User_Gender User::gender() const {
  // @@protoc_insertion_point(field_get:login_proto.User.gender)
  return _internal_gender();
}
inline void User::_internal_set_gender(::login_proto::User_Gender value) {
  
  gender_ = value;
}
inline void User::set_gender(::login_proto::User_Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:login_proto.User.gender)
}

// -------------------------------------------------------------------

// FriendsRequest

// int32 userid = 1;
inline void FriendsRequest::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendsRequest::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendsRequest::userid() const {
  // @@protoc_insertion_point(field_get:login_proto.FriendsRequest.userid)
  return _internal_userid();
}
inline void FriendsRequest::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void FriendsRequest::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:login_proto.FriendsRequest.userid)
}

// -------------------------------------------------------------------

// FriendsResponse

// .login_proto.ResultInfo info = 1;
inline bool FriendsResponse::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool FriendsResponse::has_info() const {
  return _internal_has_info();
}
inline void FriendsResponse::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::login_proto::ResultInfo& FriendsResponse::_internal_info() const {
  const ::login_proto::ResultInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::login_proto::ResultInfo*>(
      &::login_proto::_ResultInfo_default_instance_);
}
inline const ::login_proto::ResultInfo& FriendsResponse::info() const {
  // @@protoc_insertion_point(field_get:login_proto.FriendsResponse.info)
  return _internal_info();
}
inline ::login_proto::ResultInfo* FriendsResponse::release_info() {
  // @@protoc_insertion_point(field_release:login_proto.FriendsResponse.info)
  
  ::login_proto::ResultInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::login_proto::ResultInfo* FriendsResponse::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::login_proto::ResultInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::login_proto::ResultInfo* FriendsResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable:login_proto.FriendsResponse.info)
  return _internal_mutable_info();
}
inline void FriendsResponse::set_allocated_info(::login_proto::ResultInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:login_proto.FriendsResponse.info)
}

// repeated .login_proto.User friend_list = 2;
inline int FriendsResponse::_internal_friend_list_size() const {
  return friend_list_.size();
}
inline int FriendsResponse::friend_list_size() const {
  return _internal_friend_list_size();
}
inline void FriendsResponse::clear_friend_list() {
  friend_list_.Clear();
}
inline ::login_proto::User* FriendsResponse::mutable_friend_list(int index) {
  // @@protoc_insertion_point(field_mutable:login_proto.FriendsResponse.friend_list)
  return friend_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_proto::User >*
FriendsResponse::mutable_friend_list() {
  // @@protoc_insertion_point(field_mutable_list:login_proto.FriendsResponse.friend_list)
  return &friend_list_;
}
inline const ::login_proto::User& FriendsResponse::_internal_friend_list(int index) const {
  return friend_list_.Get(index);
}
inline const ::login_proto::User& FriendsResponse::friend_list(int index) const {
  // @@protoc_insertion_point(field_get:login_proto.FriendsResponse.friend_list)
  return _internal_friend_list(index);
}
inline ::login_proto::User* FriendsResponse::_internal_add_friend_list() {
  return friend_list_.Add();
}
inline ::login_proto::User* FriendsResponse::add_friend_list() {
  // @@protoc_insertion_point(field_add:login_proto.FriendsResponse.friend_list)
  return _internal_add_friend_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::login_proto::User >&
FriendsResponse::friend_list() const {
  // @@protoc_insertion_point(field_list:login_proto.FriendsResponse.friend_list)
  return friend_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace login_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::login_proto::User_Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::login_proto::User_Gender>() {
  return ::login_proto::User_Gender_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_2eproto
